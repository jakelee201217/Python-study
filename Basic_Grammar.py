# =============================================================================
# 파이썬 기초 문법 정리 노트
# =============================================================================
"""
파이썬을 배우는 이유:
1. 다른 언어들에 비해 간결한 문법 - 배우기 쉬움
2. 머신러닝 및 AI 분야의 강력함
3. 범용성 - 웹, 데이터분석, 자동화 등 모든 분야에서 활용 가능
"""

# =============================================================================
# 1. 변수와 데이터 타입 (Variables & Data Types)
# =============================================================================

# -----------------------------------------------------------------------------
# 변수 (Variables)
# 변수는 값을 저장하는 메모리 공간에 이름을 붙인 것
# 마치 상자에 라벨을 붙여서 나중에 찾기 쉽게 만드는 것과 같음
# -----------------------------------------------------------------------------
name = 'jake'  # 문자열 값을 name이라는 변수에 저장

# -----------------------------------------------------------------------------
# 1-1. 정수형 (int) - Integer
# 소수점이 없는 숫자들. 양수, 음수, 0 모두 포함
# -----------------------------------------------------------------------------
j = 13              # 양의 정수
score = -5          # 음의 정수
zero_value = 0      # 영
count = 100         # 카운트용으로 자주 사용

# -----------------------------------------------------------------------------
# 1-2. 실수형 (float) - Floating Point
# 소수점이 있는 숫자들. 정밀한 계산이나 측정값에 사용
# -----------------------------------------------------------------------------
a = 12.6            # 일반적인 실수
pi = 3.14159        # 원주율
temperature = -2.5  # 온도 (음의 실수)
height = 175.8      # 키

# -----------------------------------------------------------------------------
# 1-3. 문자열 (str) - String
# 문자들의 집합. 따옴표로 감싸서 표현 (작은따옴표 ' 또는 큰따옴표 ")
# -----------------------------------------------------------------------------
jake = "jake lee"           # 큰따옴표 사용
greeting = '안녕하세요'     # 작은따옴표 사용
empty_text = ""             # 빈 문자열
address = "서울시 강남구"   # 주소

# 1-3-1. 문자열 연산 (중요!)
print(name + jake)  # 문자열 연결(concatenation) → "jakejake lee"
print(name * 3)     # 문자열 반복(repetition) → "jakejakejake"

# 다양한 문자열 연산 예시
first_name = "홍"
last_name = "길동"
full_name = first_name + last_name  # "홍길동"
separator = "-" * 10                # "----------"

# -----------------------------------------------------------------------------
# 1-4. 불리언 (bool) - Boolean
# 참(True) 또는 거짓(False) 두 개의 값만 가질 수 있는 논리 타입
# 조건문이나 반복문에서 정말 많이 사용됨
# -----------------------------------------------------------------------------
is_student = False      # 거짓
is_sunny = True         # 참
has_license = False     # 면허 보유 여부
is_adult = True         # 성인 여부

# =============================================================================
# 2. 형 변환 (Type Casting) - 데이터 타입 바꾸기
# =============================================================================
"""
주의: 서로 다른 타입끼리는 연산이 안 되는 경우가 많아서
     형 변환이 정말 중요함. 항상 확인하자.
"""

# 문자열을 숫자로 변환 (입력받을 때 많이 사용)
num_str = "20"                  # 문자열 "20"
num_int = int(num_str)          # 정수 20으로 변환
num_float = float(num_str)      # 실수 20.0으로 변환

# 실제 활용 예시
user_input = "25"               # 사용자가 입력한 나이
user_age = int(user_input)      # 정수로 변환해서 계산 가능

# 숫자를 문자열로 변환 (출력이나 문자열 조작시 사용)
age = 25
age_str = str(age)              # 문자열 "25"로 변환
message = "나이는 " + age_str + "세입니다"

# 타입 확인하는 방법 (디버깅할 때 유용함)
print(type(num_int))            # <class 'int'>
print(type(age_str))            # <class 'str'>
print(type(is_student))         # <class 'bool'>

# =============================================================================
# 3. 연산자 (Operators) - 계산의 핵심
# =============================================================================

# 테스트용 변수 설정
b = 5  # a는 위에서 12.6으로 설정됨

# -----------------------------------------------------------------------------
# 3-1. 산술 연산자 (Arithmetic Operators)
# 수학에서 쓰는 사칙연산과 거의 비슷함
# -----------------------------------------------------------------------------
add = a + b         # 덧셈: 12.6 + 5 = 17.6
sub = a - b         # 뺄셈: 12.6 - 5 = 7.6
mul = a * b         # 곱셈: 12.6 * 5 = 63.0
div = a / b         # 나눗셈: 12.6 / 5 = 2.52
floor_div = a // b  # 몫(나눗셈 후 정수): 12.6 // 5 = 2.0
mod = a % b         # 나머지: 12.6 % 5 = 2.6
exp = a ** b        # 거듭제곱: 12.6의 5제곱

# 실무에서 자주 쓰이는 연산 예시
total_price = 15000
people = 3
per_person = total_price // people  # 1인당 지불할 금액 (몫)
remainder = total_price % people    # 남는 돈 (나머지)

# -----------------------------------------------------------------------------
# 3-2. 비교 연산자 (Comparison Operators)
# 두 값을 비교해서 True 또는 False 결과를 반환
# -----------------------------------------------------------------------------
equal = (a == b)        # 같음: False (12.6과 5는 다름)
not_equal = (a != b)    # 다름: True (12.6과 5는 다름)
greater = (a > b)       # 큼: True (12.6이 5보다 큼)
less = (a < b)          # 작음: False (12.6이 5보다 작지 않음)
greater_eq = (a >= b)   # 크거나 같음: True
less_eq = (a <= b)      # 작거나 같음: False

# 실제 활용 예시
student_score = 85
passing_score = 60
is_pass = student_score >= passing_score  # True

# -----------------------------------------------------------------------------
# 3-3. 논리 연산자 (Logical Operators)
# 조건들을 조합할 때 사용. if문에서 정말 많이 쓰임
# -----------------------------------------------------------------------------
and_result = (a > 10) and (b < 10)  # AND: 둘 다 참이어야 True
or_result = (a > 20) or (b < 10)    # OR: 하나만 참이어도 True
not_result = not(a == b)            # NOT: 결과를 뒤집음

# 실제 활용 예시
age = 20
has_id = True
can_enter = (age >= 18) and has_id  # 18세 이상이고 신분증이 있어야 입장 가능

# -----------------------------------------------------------------------------
# 3-4. 할당 연산자 (Assignment Operators)
# 계산과 동시에 값을 저장. 코드를 짧고 깔끔하게 만들어줌
# -----------------------------------------------------------------------------
x = 10      # 초기값 설정
x += 5      # x = x + 5  → x는 15 (더하기와 저장을 한 번에)
x -= 3      # x = x - 3  → x는 12
x *= 2      # x = x * 2  → x는 24
x /= 4      # x = x / 4  → x는 6.0
x //= 2     # x = x // 2 → x는 3.0
x %= 2      # x = x % 2  → x는 1.0
x **= 3     # x = x ** 3 → x는 1.0

# 실제 활용 예시
balance = 50000     # 잔액
balance -= 15000    # 15000원 사용
balance += 10000    # 10000원 입금

# =============================================================================
# 4. 연산자 우선순위 (Operator Precedence)
# =============================================================================
"""
수학 시간에 배운 것과 거의 똑같음.
괄호 먼저, 곱셈·나눗셈 다음, 덧셈·뺄셈 마지막
헷갈리면 괄호를 써서 명확하게 하는 것이 좋음
"""

# 우선순위 테스트
result1 = 2 + 3 * 4     # 곱셈이 먼저 → 2 + 12 = 14
result2 = (2 + 3) * 4   # 괄호가 최우선 → 5 * 4 = 20
result3 = 2 ** 3 * 2    # 거듭제곱이 먼저 → 8 * 2 = 16

# 복잡한 계산 예시
complex_calc = 10 + 5 * 2 ** 3 - 4  # 10 + 5 * 8 - 4 = 10 + 40 - 4 = 46

# 우선순위 표 (높음 → 낮음)
"""
1. 괄호 ()                          ← 가장 높음
2. 거듭제곱 **                      ← 수학과 동일
3. 곱셈 *, 나눗셈 /, 몫 //, 나머지 %
4. 덧셈 +, 뺄셈 -
5. 비교연산자 ==, !=, >, <, >=, <=
6. 논리연산자 not, and, or          ← 가장 낮음
"""

# =============================================================================
# 5. 들여쓰기 (Indentation) - 파이썬의 특별한 규칙
# =============================================================================
"""
파이썬의 가장 중요한 특징 중 하나.
다른 언어는 중괄호{}로 코드 블록을 구분하지만,
파이썬은 들여쓰기로 구분함.

들여쓰기 = 코드의 계층 구조를 나타냄
"""

# 예시 (실제로는 조건문을 배운 후에 사용 가능)
user_age = 15

# 들여쓰기로 코드 블록 구분
if user_age >= 18:
    print("성인입니다")           # 4칸 들여쓰기
    print("투표할 수 있습니다")   # 같은 레벨
else:
    print("미성년자입니다")       # 4칸 들여쓰기
    if user_age >= 13:
        print("청소년입니다")     # 8칸 들여쓰기 (중첩)
        print("중학생 이상")      # 같은 중첩 레벨

# 들여쓰기 규칙 (반드시 지켜야 함)

"""
- 같은 블록 내에서는 동일한 들여쓰기 사용
- 스페이스 4개 또는 탭 1개 (둘 중 하나로 통일)
- 탭과 스페이스를 절대 혼용하지 않기
- 일관성 있게 유지하기
- 들여쓰기가 잘못되면 IndentationError 발생
"""

